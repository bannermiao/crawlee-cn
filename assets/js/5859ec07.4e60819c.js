"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3009],{8891:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>h});var r=a(5893),n=a(1151),s=a(5316),o=a(4959);const l={code:"import { Dataset, HttpCrawler, log, LogLevel } from 'crawlee';\n\n// Crawlers come with various utilities, e.g. for logging.\n// Here we use debug level of logging to improve the debugging experience.\n// This functionality is optional!\nlog.setLevel(LogLevel.DEBUG);\n\n// Create an instance of the HttpCrawler class - a crawler\n// that automatically loads the URLs and saves their HTML.\nconst crawler = new HttpCrawler({\n    // The crawler downloads and processes the web pages in parallel, with a concurrency\n    // automatically managed based on the available system memory and CPU (see AutoscaledPool class).\n    // Here we define some hard limits for the concurrency.\n    minConcurrency: 10,\n    maxConcurrency: 50,\n\n    // On error, retry each page at most once.\n    maxRequestRetries: 1,\n\n    // Increase the timeout for processing of each page.\n    requestHandlerTimeoutSecs: 30,\n\n    // Limit to 10 requests per one crawl\n    maxRequestsPerCrawl: 10,\n\n    // This function will be called for each URL to crawl.\n    // It accepts a single parameter, which is an object with options as:\n    // https://crawlee.dev/api/http-crawler/interface/HttpCrawlerOptions#requestHandler\n    // We use for demonstration only 2 of them:\n    // - request: an instance of the Request class with information such as the URL that is being crawled and HTTP method\n    // - body: the HTML code of the current page\n    async requestHandler({ request, body }) {\n        log.debug(`Processing ${request.url}...`);\n\n        // Store the results to the dataset. In local configuration,\n        // the data will be stored as JSON files in ./storage/datasets/default\n        await Dataset.pushData({\n            url: request.url,\n            body,\n        });\n    },\n\n    // This function is called if the page processing failed more than maxRequestRetries + 1 times.\n    failedRequestHandler({ request }) {\n        log.debug(`Request ${request.url} failed twice.`);\n    },\n});\n\n// Run the crawler and wait for it to finish.\nawait crawler.run([\n    'https://crawlee.dev',\n]);\n\nlog.debug('Crawler finished.');\n",hash:"invalid-token"},i={id:"http-crawler",title:"HTTP crawler"},c=void 0,p={id:"examples/http-crawler",title:"HTTP crawler",description:"This example demonstrates how to use HttpCrawler to crawl a list of URLs from an external file, load each URL using a plain HTTP request, and save HTML.",source:"@site/versioned_docs/version-3.6/examples/http_crawler.mdx",sourceDirName:"examples",slug:"/examples/http-crawler",permalink:"/docs/examples/http-crawler",draft:!1,unlisted:!1,tags:[],version:"3.6",frontMatter:{id:"http-crawler",title:"HTTP crawler"},sidebar:"docs",previous:{title:"Forms",permalink:"/docs/examples/forms"},next:{title:"JSDOM crawler",permalink:"/docs/examples/jsdom-crawler"}},d={},h=[];function u(e){const t={code:"code",p:"p",...(0,n.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["This example demonstrates how to use ",(0,r.jsx)(o.Z,{to:"http-crawler/class/HttpCrawler",children:(0,r.jsx)(t.code,{children:"HttpCrawler"})})," to crawl a list of URLs from an external file, load each URL using a plain HTTP request, and save HTML."]}),"\n",(0,r.jsx)(s.Z,{className:"language-js",type:"cheerio",children:l})]})}function m(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},4959:(e,t,a)=>{a.d(t,{Z:()=>c});a(7294);var r=a(9960),n=a(4477),s=a(2263),o=a(5893),l=a(643).version.split("."),i=[l[0],l[1]].join(".");const c=function(e){var t=e.to,a=e.children,l=(0,n.E)();return(0,s.default)().siteConfig.presets[0][1].docs.disableVersioning||l.version===i?(0,o.jsx)(r.default,{to:"/api/"+t,children:a}):(0,o.jsx)(r.default,{to:"/api/"+("current"===l.version?"next":l.version)+"/"+t,children:a})}},5316:(e,t,a)=>{a.d(t,{Z:()=>d});var r=a(3366),n=(a(7294),a(512)),s=a(3e3),o=a(9960);const l={button:"button_YBBj",container:"container_TGAW"};var i=a(5893),c=["children","actor","hash","type"],p={playwright:"6i5QsHBMtm3hKph70",puppeteer:"7tWSD8hrYzuc9Lte7",cheerio:"kk67IcZkKSSBTslXI"};const d=function(e){var t,a=e.children,d=e.actor,h=e.hash,u=e.type,m=(0,r.Z)(e,c);if(h=null!=(t=h)?t:a.hash,!a.code)throw new Error('RunnableCodeBlock requires "code" and "hash" props\nMake sure you are importing the code block contents with the roa-loader.');if(!h)return(0,i.jsx)(s.default,Object.assign({},m,{children:a.code}));var w="https://console.apify.com/actors/"+(null!=d?d:p[null!=u?u:"playwright"])+"?runConfig="+h+"&asrc=run_on_apify";return(0,i.jsxs)("div",{className:(0,n.Z)(l.container,"runnable-code-block"),children:[(0,i.jsxs)(o.default,{href:w,className:l.button,rel:"follow",children:["Run on",(0,i.jsxs)("svg",{width:"91",height:"25",viewBox:"0 0 91 25",fill:"none",xmlns:"http://www.w3.org/2000/svg",className:"apify-logo-light alignMiddle_src-theme-Footer-index-module",children:[(0,i.jsx)("path",{d:"M3.135 2.85A3.409 3.409 0 0 0 .227 6.699l2.016 14.398 8.483-19.304-7.59 1.059Z",fill:"#97D700"}),(0,i.jsx)("path",{d:"M23.604 14.847 22.811 3.78a3.414 3.414 0 0 0-3.64-3.154c-.077 0-.153.014-.228.025l-3.274.452 7.192 16.124c.54-.67.805-1.52.743-2.379Z",fill:"#71C5E8"}),(0,i.jsx)("path",{d:"M5.336 24.595c.58.066 1.169-.02 1.706-.248l12.35-5.211L13.514 5.97 5.336 24.595Z",fill:"#FF9013"}),(0,i.jsx)("path",{d:"M33.83 5.304h3.903l5.448 14.623h-3.494l-1.022-2.994h-5.877l-1.025 2.994h-3.384L33.83 5.304Zm-.177 9.032h4.14l-2-5.994h-.086l-2.054 5.994ZM58.842 5.304h3.302v14.623h-3.302V5.304ZM64.634 5.304h10.71v2.7h-7.4v4.101h5.962v2.632h-5.963v5.186h-3.309V5.303ZM82.116 14.38l-5.498-9.076h3.748l3.428 6.016h.085l3.599-6.016H91l-5.56 9.054v5.569h-3.324v-5.548ZM51.75 5.304h-7.292v14.623h3.3v-4.634h3.993a4.995 4.995 0 1 0 0-9.99Zm-.364 7.417h-3.628V7.875h3.627a2.423 2.423 0 0 1 0 4.846Z",className:"apify-logo",fill:"#000"})]})]}),(0,i.jsx)(s.default,Object.assign({},m,{className:(0,n.Z)(l.codeBlock,"code-block",null!=m.title?"has-title":"no-title"),children:a.code}))]})}},1151:(e,t,a)=>{a.d(t,{Z:()=>l,a:()=>o});var r=a(7294);const n={},s=r.createContext(n);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),r.createElement(s.Provider,{value:t},e.children)}},643:e=>{e.exports=JSON.parse('{"name":"crawlee","version":"3.6.2","description":"The scalable web crawling and scraping library for JavaScript/Node.js. Enables development of data extraction and web automation jobs (not only) with headless Chrome and Puppeteer.","engines":{"node":">=16.0.0"},"bin":"./src/cli.ts","main":"./dist/index.js","module":"./dist/index.mjs","types":"./dist/index.d.ts","exports":{".":{"import":"./dist/index.mjs","require":"./dist/index.js","types":"./dist/index.d.ts"},"./package.json":"./package.json"},"keywords":["apify","headless","chrome","puppeteer","crawler","scraper"],"author":{"name":"Apify","email":"support@apify.com","url":"https://apify.com"},"contributors":["Jan Curn <jan@apify.com>","Marek Trunkat <marek@apify.com>","Ondra Urban <ondra@apify.com>"],"license":"Apache-2.0","repository":{"type":"git","url":"git+https://github.com/apify/crawlee"},"bugs":{"url":"https://github.com/apify/crawlee/issues"},"homepage":"https://crawlee.dev","scripts":{"build":"yarn clean && yarn compile && yarn copy","clean":"rimraf ./dist","compile":"tsc -p tsconfig.build.json && gen-esm-wrapper ./dist/index.js ./dist/index.mjs","copy":"tsx ../../scripts/copy.ts"},"publishConfig":{"access":"public"},"dependencies":{"@crawlee/basic":"3.6.2","@crawlee/browser":"3.6.2","@crawlee/browser-pool":"3.6.2","@crawlee/cheerio":"3.6.2","@crawlee/cli":"3.6.2","@crawlee/core":"3.6.2","@crawlee/http":"3.6.2","@crawlee/jsdom":"3.6.2","@crawlee/linkedom":"3.6.2","@crawlee/playwright":"3.6.2","@crawlee/puppeteer":"3.6.2","@crawlee/utils":"3.6.2","import-local":"^3.1.0","tslib":"^2.4.0"},"peerDependencies":{"playwright":"*","puppeteer":"*"},"peerDependenciesMeta":{"playwright":{"optional":true},"puppeteer":{"optional":true}}}')}}]);